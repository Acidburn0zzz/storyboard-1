{
  "name": "Storyboard",
  "tagline": "End-to-end, hierarchical, real-time, colorful logs and stories",
  "body": "# storyboard [![Build Status](https://travis-ci.org/guigrpa/storyboard.svg?branch=master)](https://travis-ci.org/guigrpa/storyboard) [![Coverage Status](https://coveralls.io/repos/github/guigrpa/storyboard/badge.svg?branch=master)](https://coveralls.io/github/guigrpa/storyboard?branch=master) [![npm version](https://img.shields.io/npm/v/storyboard.svg)](https://www.npmjs.com/package/storyboard) \r\n\r\n## What?\r\n\r\n![Storyboard DevTools](https://raw.githubusercontent.com/guigrpa/storyboard/master/docs/Storyboard.gif)\r\n\r\nA library, plus a [Chrome DevTools extension](https://chrome.google.com/webstore/detail/storyboard-devtools/gficinaagglofbelmgdkknaefhpknccc).\r\n\r\nDemo: http://storyboard-demo.herokuapp.com/\r\n\r\n## Why?\r\n\r\n* **Hierarchical stories**: put logs in context (*stories*), and group stories/logs within stories. Such groupings are extremely useful with concurrent user actions.\r\n* Get the whole picture with *end-to-end stories*: see all **client and server tasks** triggered by a user action (a click on the *Login* button, maybe) **in a single place**.\r\n* Use the **Storyboard DevTools Chrome extension** to view client and server logs with a clean and detail-rich interface. Now with **remote client log monitoring for mobile devices** and non-Chrome browsers.\r\n* Watch server logs being pushed in **real time** to the Storyboard DevTools extension via WebSockets. Even more: **control the level of detail you get from various parts of your server remotely, without relaunching**.\r\n* Ask for **authentication** to see server logs; hook up your own auth function.\r\n* **Attach anything** to your logs for further investigation.\r\n* Integrate your app with Storyboard's **flexible plugin architecture**. Four plugins are available out of the box: Console, WebSocket Server & Client and Browser Extension. Just use what you need: most features are optional!\r\n* Give logs **source and severity** attributes and apply **coarse- or fine-grained filtering**, with white and black lists.\r\n* Use **color** to highlight what's important. Storyboard extends the popular [chalk](https://github.com/chalk/chalk) library so that it can also be used on the browser.\r\n* Enjoy the **simple-yet-powerful API** (I hope!).\r\n\r\n\r\n## How?\r\n\r\n### Installation\r\n\r\nTo install the **Storyboard library** in your project:\r\n\r\n```\r\n$ npm install --save storyboard\r\n```\r\n\r\nTo install the **Storyboard DevTools** Chrome extension, [get it from the Chrome Web Store](https://chrome.google.com/webstore/detail/storyboard-devtools/gficinaagglofbelmgdkknaefhpknccc). Optional, but highly recommended! After installing it, open the Storyboard pane in the Chrome DevTools and point your browser to a Storyboard-equipped page (see below for how to use the library).\r\n\r\nFeel free to check out the [example](https://github.com/guigrpa/storyboard/blob/master/src/example): just clone the repo and run `npm install && npm run buildExample && npm run example`.\r\n\r\n\r\n### Basic usage\r\n\r\n```js\r\nimport { mainStory: story } from 'storyboard';\r\nstory.info('Hello world!');\r\n```\r\n\r\n\r\n### Severity levels\r\n\r\n```js\r\nstory.trace('Teeny-weeny detail: x = 3, y = 4');\r\nstory.debug('Called login()');\r\nstory.info('User \"admin\" authenticated successfully');\r\nstory.warn('Sad we can\\'t show colors in GFM');\r\nstory.error('User \"admin\" could not be authenticated', { attach: err });\r\nstory.fatal('Ooops! Crashed! Mayday!', { attach: fatalError });\r\n// ...\r\n// 2016-03-09T16:18:19.659Z           main WARN  Sad we can't show colors in GFM\r\n// 2016-03-09T16:18:19.672Z           main ERROR User 'admin' could not be authenticated\r\n// 2016-03-09T16:18:19.672Z           main ERROR   name: 'Error'\r\n// 2016-03-09T16:18:19.672Z           main ERROR   message: 'AUTHENTICATION_ERROR'\r\n// 2016-03-09T16:18:19.672Z           main ERROR   stack: Error: AUTHENTICATION_ERROR\r\n// 2016-03-09T16:18:19.672Z           main ERROR   stack:     at repl:3:11\r\n// ...\r\n```\r\n\r\nMaybe you noticed that the `trace` call produces no output by default. See [Log filtering](#log-filtering) to understand why.\r\n\r\n\r\n### Sources\r\n\r\nNamespace your logs for readability, as well as to allow finer-grained [filtering](#log-filtering) later on.\r\n\r\n```js\r\nstory.info('http', 'GET /api/item/25');\r\nstory.info('db', 'Fetching item 25...');\r\n// 2016-03-09T16:29:51.943Z           http INFO  GET /api/item/25\r\n// 2016-03-09T16:31:52.231Z             db INFO  Fetching item 25...\r\n```\r\n\r\n\r\n### Colors\r\n\r\nUse colors to highlight important parts of your logs:\r\n\r\n```js\r\nstory.info('http', `GET ${chalk.green.bold('/api/item/26')}`);\r\nstory.info('db', `Fetching item ${chalk.green.bold('26')}...`);\r\n// 2016-03-09T16:29:51.943Z           http INFO  GET /api/item/26\r\n// 2016-03-09T16:31:52.231Z             db INFO  Fetching item 26...\r\n```\r\n\r\nWe recommend using the popular [chalk](https://github.com/chalk/chalk) library by Sindre Sorhus. Chalk is automatically extended by Storyboard for use in the browser. If you prefer another ANSI-color library, make sure it's universal and doesn't disable itself in the browser.\r\n\r\n\r\n### Attachments\r\n\r\nAttach anything to your logs that might provide additional context: an object, an array, an exception, a simple value... Don't worry about circular references! Use the `attach` option to display it as a tree, or `attachInline` for a more compact, `JSON.stringify`-ed version.\r\n\r\nYou can also use the `attachLevel` option to control the (severity) level of the detailed object logs (by default: the same level of the main logged line).\r\n\r\n```js\r\nstory.info('test', 'A simple object', { attachInline: obj1 });\r\n// 2016-03-09T16:51:16.436Z           test INFO  A simple object -- {\"foo\":2,\"bar\":3}\r\nstory.info('test', 'An object with a circular reference', {\r\n  attach: obj2, \r\n  attachLevel: 'debug',\r\n});\r\n// 2016-03-09T16:52:48.882Z           test INFO  An object with a circular reference\r\n// 2016-03-09T16:52:48.882Z           test DEBUG   foo: 2\r\n// 2016-03-09T16:52:48.882Z           test DEBUG   bar: 3\r\n// 2016-03-09T16:52:48.882Z           test DEBUG   circularRef: [CIRCULAR]\r\n```\r\n\r\n*Note: `attach` and `attachInline` have no effect on the way attachments are shown in the Storyboard DevTools.*\r\n\r\n\r\n### Log filtering\r\n\r\nInspired by the popular [debug](https://github.com/visionmedia/debug) library, Storyboard allows you to filter logs according to source, specifying white and black lists and using wildcards. Beyond that, you can specify the minimum severity level you are interested in, depending on the source:\r\n\r\n* `*:DEBUG` (default) or `*` will include logs from all sources, as long as they have severity `debug` or higher.\r\n* `*:*` will include absolutely all logs.\r\n* `foo` or `foo:DEBUG` will include logs from `foo` but exclude all other sources.\r\n* `-test, *:*` will include all logs, except those from source `test`.\r\n* `foo, bar:INFO, -test, *:WARN` will include logs from `foo` (`DEBUG` or higher), `bar` (`INFO` or higher), and all other sources (`WARN` or higher), but exclude source `test`.\r\n* `ba*:*, -basket` will include all logs from `bar`, `baz`, etc. but exclude source `basket`.\r\n\r\nIn Node, you can configure log filtering via the `STORYBOARD` environment variable (have a look at [cross-env](https://github.com/kentcdodds/cross-env) for a cross-platform setup):\r\n\r\n```bash\r\n# OS X / Linux\r\nSTORYBOARD=*:* node myScript\r\n# Windows\r\nset \"STORYBOARD=*:*\" && node myScript\r\n```\r\n\r\nIn the browser, use `localStorage`:\r\n\r\n```js\r\nlocalStorage.STORYBOARD = \"*:*\"\r\n```\r\n\r\nAlternatively, you can configure the log filters programatically:\r\n\r\n```js\r\nimport storyboard from 'storyboard';\r\nstoryboard.config({ filter: '*:*' });\r\n```\r\n\r\nOr even more convenient: leave the default and configure it remotely and without reloading by using the [Storyboard DevTools](#storyboard-devtools).\r\n\r\n### Children stories\r\n\r\nCreate child stories by calling `child()` on the parent story and passing an options argument. Don't forget to `close()` the child story when you're done with it! More on child stories [here](#remote-access-to-server-stories).\r\n\r\n```js\r\nconst childStory = story.child({\r\n  src: 'lib',\r\n  title: 'Little Red Riding Hood',\r\n  level: 'DEBUG',\r\n});\r\nchildStory.info('Once upon a time...');\r\nchildStory.warn('...a wolf appeared!...');\r\nchildStory.info('...and they lived happily ever after.');\r\nchildStory.close();\r\n// 2016-03-19T14:10:14.080Z        lib DEBUG ┌── Little Red Riding Hood [CREATED]\r\n// 2016-03-19T14:10:14.083Z       main INFO  Once upon a time...\r\n// 2016-03-19T14:10:14.085Z       main WARN  ...a wolf appeared!...\r\n// 2016-03-19T14:10:14.087Z       main INFO  ...and they lived happily ever after.\r\n// 2016-03-19T14:10:14.088Z        lib DEBUG └── Little Red Riding Hood [CLOSED]\r\n```\r\n\r\n*Note: Child stories have `INFO` level by default, and can be completely hidden by [log filtering](#log-filtering). However, when a log with level `WARN` or higher is added to a hidden story, the story and all of its ancestors will become visible. You will not miss any errors, nor the actions that led to them!*\r\n\r\n\r\n### Listeners (plugins)\r\n\r\nLogs emitted by stories are relayed by the Storyboard `hub` module to all attached *listeners*. Several listeners come built-in:\r\n\r\n* **Console**: formats logs and sends them to `console.log` or `console.error`. You've already seen this listener in action above. Automatically enabled in the server, and in development mode in the browser (set the `NODE_ENV` environment variable to `production` to exclude it from your bundle).\r\n\r\n* **Browser Extension**: relays local (client) logs to the [Storyboard DevTools](#storyboard-devtools). Automatically enabled in the browser in development mode.\r\n\r\n* **WebSocket Server**: encapsulates logs and pushes them in real time to WebSocket clients. Disabled by default; enable it for [remote access to server stories](#remote-access-to-server-stories).\r\n\r\n* **WebSocket Client**: relays logs pushed from the server to the [Storyboard DevTools](#storyboard-devtools). It can also [upload client logs to the server for remote monitoring](#remote-access-to-client-stories). Automatically enabled in the browser in development mode.\r\n\r\nMore listeners can be added by the user, e.g. to persist logs in a database, publish them online, etc. Get inspired by [winston](https://github.com/winstonjs/winston)'s and [bunyan](https://github.com/trentm/node-bunyan)'s plugins.\r\n\r\n*Note: If you don't want any listeners to be enabled, just import `'storyboard/lib/noPlugins'` instead of `'storyboard'`. See [\"Remote access to client stories\" below](#remote-access-to-client-stories) for a particular case in which this is useful. In the future, it is quite probable that `noPlugins` becomes the default option.*\r\n\r\n\r\n### Remote access to server stories\r\n\r\nAdding remote access to a Node application is easy; just attach the WebSocket Server listener as follows:\r\n\r\n```js\r\nimport { mainStory, addListener } from 'storyboard';\r\nimport wsServer from 'storyboard/lib/listeners/wsServer';\r\naddListener(wsServer);\r\n```\r\n\r\nYou can call `addListener()` with an additional `options` object overriding the following defaults or including additional parameters:\r\n\r\n```js\r\nconst options = {\r\n  port: 8090,           // port for standalone log server\r\n  throttle: 200,        // [ms] send logs at most every X ms\r\n  authenticate: null,   // no authentication function\r\n  httpServer: null,     // no integration with existing HTTP server\r\n  socketServer: null,   // no integration with existing socket.io server\r\n};\r\n```\r\n\r\nYou'll probably want to configure the `authenticate` function (without it, your server logs become public by enabling the listener):\r\n\r\n```js\r\n// Example #1: synchronous\r\nstoryboard.addListener(wsServer, {\r\n  authenticate: ({ login, password }) => true,\r\n});\r\n\r\n// Example #2: asynchronous (returning a promise)\r\nstoryboard.addListener(wsServer, {\r\n  authenticate: ({ login, password }) => Promise.resolve(true),\r\n});\r\n```\r\n\r\nYou'll also probably want to supercharge your **main application HTTP server for [end-to-end stories](#end-to-end-stories)**. Just pass your `http` `Server` instance as `options.httpServer`, or your [`socket.io`](http://socket.io/) `Server` instance as `options.socketServer`, depending on your case:\r\n\r\n```js\r\n// If you don't use WebSockets:\r\nimport express from 'express';\r\nimport http from 'http';\r\nconst httpServer = http.createServer(express());\r\nhttpServer.listen(3000);\r\nstoryboard.addListener(wsServer, { httpServer });\r\n\r\n// If you use socket.io WebSockets (without socket authentication):\r\nimport socketio from 'socket.io';\r\nconst socketServer = socketio(httpServer);\r\nstoryboard.addListener(wsServer, { socketServer });\r\n\r\n// If you use socket authentication, namespace the main app's\r\n// sockets so that they don't clash with the log server's:\r\n// At the server...\r\nconst io = socketServer.of('/myApp');\r\nio.use(myAuthMiddleware);\r\nio.on('connection', myConnectFunction);\r\n// ...and at the client:\r\nconst socket = socketio.connect('/myApp')\r\n```\r\n\r\nYou can also change the port of the **standalone log server** (independent from your main application's HTTP server) by modifying `options.port`. Disable it entirely by setting the attribute to `null`.\r\n\r\n\r\n### Remote access to client stories\r\n\r\nIn some cases, you may want to remotely monitor client logs, e.g. if you are building a mobile web app, or you want to see the logs generated in non-Chrome browsers for which there is (currently) no [browser extension](#storyboard-devtools).\r\n\r\nFor these cases, you can configure your WebSocket Client listener so that it uploads its logs to the server, which can then provide remote access to them:\r\n\r\n```js\r\nimport { mainStory, addListener } from 'storyboard/lib/noPlugins';\r\nimport wsClient from 'storyboard/lib/listeners/wsClient';\r\naddListener(wsClient, { uploadClientStories: true });\r\n```\r\n\r\nClient logs will not pollute the server's own log, and will appear under a dedicated *browser root story* in the Storyboard DevTools, along with a short description on the client's platform:\r\n\r\n![Remote monitoring](https://raw.githubusercontent.com/guigrpa/storyboard/master/docs/05-Remote%20monitoring.png)\r\n\r\n\r\n### End-to-end stories\r\n\r\nThe icing on the cake is linking server- and client-side stories to get a complete picture of what is triggered by a user action (see video [at the top of this page](#what)).\r\n\r\nStoryboard provides a simple yet flexible way to achieve this: stories can have multiple parents, which are specified upon creation. This feature is leveraged by the [Storyboard DevTools](#storyboard-devtools): when it receives a new story from the server with multiple parents, it checks whether any of the parents is a client-side story. If so, it prioritises this parent for display purposes, since it is expected to provide more context.\r\n\r\nFor this to work, the client's `storyId` must be transmitted to the server *somehow*. This example uses the URL query string for simplicity, but feel free to use whatever technique you want (the body of a `POST` request, your own WebSocket messaging scheme, etc.):\r\n\r\n```js\r\n// Client:\r\nconst story = mainStory.child({\r\n  src: 'itemList',\r\n  title: 'User click on Refresh',\r\n});\r\nstory.info('itemList', 'Fetching items...');\r\nfetch(`/items?storyId=${story.storyId}`)\r\n.then(response => response.json())\r\n.then(items => story.info('itemList', `Fetched ${items.length} items`))\r\n.finally(() => story.close());  // using Bluebird's terse API\r\n\r\n// Server (using Express):\r\nimport express from 'express';\r\nconst app = express();\r\napp.get('/items', (req, res) => {\r\n  const { storyId } = req.query;\r\n  const extraParents = (storyId != null) ? [storyId] : undefined;\r\n  const story = mainStory.child({\r\n    src: 'http', \r\n    title: `HTTP request ${req.url}`,\r\n    extraParents,\r\n  });\r\n  story.info('http', 'Processing request...');\r\n  // ...\r\n  res.json(items);\r\n  story.close();\r\n});\r\n```\r\n\r\nWant to see the end-to-end story? Use the Storyboard DevTools extension.\r\n\r\n*Note: end-to-end stories work better when server and client system clocks are not too different. Servers are typically NTP-synchronised, as are most modern PCs with Internet access. If this is not the case, your story hierarchy will be OK but mixed client-server stories might be out of order.*\r\n\r\n\r\n### Storyboard DevTools\r\n\r\nUsing the browser extension should be pretty straightforward. After [installing it](https://chrome.google.com/webstore/detail/storyboard-devtools/gficinaagglofbelmgdkknaefhpknccc), open the Chrome DevTools, select the Storyboard pane and point your browser at either:\r\n\r\n* Your standard application URL, to see both server and client logs\r\n* Port 8090 (configurable) of your server, to see server logs only\r\n\r\nSome highlighted features:\r\n\r\n* Modify the server's filter configuration, without restarting it.\r\n* Show a story chronologically (*flat*) or hierarchically (*tree*): hover on the story title for the button to appear.\r\n* Collapse/expand stories: click on the caret.\r\n* Open attachments, including exceptions: click on the folder icon.\r\n* 3 timestamp formats: UTC, local or relative to now: click on any timestamp.\r\n* Use quick find (case-insensitive) to highlight what you're looking for.\r\n* See how identical, consecutive messages get squashed into a convenient summary line.\r\n* Configure when and how Storyboard *forgets* old logs and stories.\r\n\r\nYou can check your new extension navigating to: http://storyboard-demo.herokuapp.com/\r\n\r\nStoryboard DevTools is built with [React](https://facebook.github.io/react/), [Redux](http://redux.js.org/) and [Redux-Saga](http://yelouafi.github.io/redux-saga/).\r\n\r\n\r\n## [What's changed since version X?](CHANGELOG.md)\r\n\r\n## Shall I? — The MIT license\r\n\r\nCopyright (c) [Guillermo Grau Panea](https://github.com/guigrpa) 2016\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}